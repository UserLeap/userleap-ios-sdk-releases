// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -module-name UserLeapKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreGraphics
import Foundation
import Swift
import UIKit
@_exported import UserLeapKit
import WebKit
import _Concurrency
import _StringProcessing
@objc public protocol SprigAPI {
  @objc func configure(withEnvironment environment: Swift.String)
  @objc func configure(withEnvironment environment: Swift.String, configuration: [Swift.String : Any]?)
  @objc func setLocale(_ locale: Swift.String)
  @objc func track(eventName: Swift.String, handler: ((UserLeapKit.SurveyState) -> Swift.Void)?)
  @objc func track(eventName: Swift.String, userId: Swift.String?, partnerAnonymousId: Swift.String?, handler: ((UserLeapKit.SurveyState) -> Swift.Void)?)
  @objc func track(eventName: Swift.String, properties: [Swift.String : Any], handler: ((UserLeapKit.SurveyState) -> Swift.Void)?)
  @objc func track(eventName: Swift.String, userId: Swift.String?, partnerAnonymousId: Swift.String?, properties: [Swift.String : Any]?, handler: ((UserLeapKit.SurveyState) -> Swift.Void)?)
  @objc func track(payload: UserLeapKit.EventPayload)
  @objc func setEmailAddress(_ emailAddress: Swift.String)
  @objc func setVisitorAttribute(key: Swift.String, value: Swift.String)
  @objc func setVisitorAttribute(key: Swift.String, doubleValue: Swift.Double)
  @objc func setVisitorAttribute(key: Swift.String, boolValue: Swift.Bool)
  @objc func setVisitorAttribute(key: Swift.String, intValue: Swift.Int)
  @objc func setVisitorAttributes(_ attributes: [Swift.String : Any])
  @objc func setVisitorAttributes(_ attributes: [Swift.String : Swift.String], userId: Swift.String?, partnerAnonymousId: Swift.String?)
  @objc func removeVisitorAttributes(_ attributes: [Swift.String])
  @objc func setUserIdentifier(_ identifier: Swift.String)
  @objc func setPartnerAnonymousId(_ identifier: Swift.String)
  @objc func logout()
}
@objc public protocol SprigPresentationAPI {
  @objc func trackAndPresent(eventName: Swift.String, from viewController: UIKit.UIViewController)
  @objc func trackAndPresent(eventName: Swift.String, userId: Swift.String?, partnerAnonymousId: Swift.String?, from viewController: UIKit.UIViewController)
  @objc func trackAndPresent(payload: UserLeapKit.EventPayload, from viewController: UIKit.UIViewController)
  @objc func presentSurvey(from viewController: UIKit.UIViewController)
  @objc func presentSurvey(withId surveyId: Swift.Int, from viewController: UIKit.UIViewController, fetchCompletion: (() -> Swift.Void)?)
}
@objc public protocol SprigOptimizelyIntegrationAPI {
  @objc func integrateOptimizely(_ optimizely: ObjectiveC.NSObject, userId: Swift.String, attributes: Swift.Dictionary<Swift.String, Any>)
}
@objc public enum SurveyState : ObjectiveC.NSInteger {
  case noSurvey
  case ready
  case disabled
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
extension UserLeapKit.UserLeap : UserLeapKit.SprigOptimizelyIntegrationAPI {
  @objc dynamic public func integrateOptimizely(_ optimizely: ObjectiveC.NSObject, userId: Swift.String, attributes: Swift.Dictionary<Swift.String, Any>)
}
@objc public class EventPayload : ObjectiveC.NSObject {
  public var eventName: Swift.String
  public var userId: Swift.String?
  public var partnerAnonymousId: Swift.String?
  public var properties: [Swift.String : Any]?
  public var handler: ((UserLeapKit.SurveyState) -> Swift.Void)?
  @objc public init(eventName: Swift.String, userId: Swift.String? = nil, partnerAnonymousId: Swift.String? = nil, properties: [Swift.String : Any]? = nil, handler: ((UserLeapKit.SurveyState) -> Swift.Void)? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Sprig : UserLeapKit.UserLeap {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class UserLeap : ObjectiveC.NSObject {
  @objc public static let shared: UserLeapKit.UserLeap
  @objc public var disableNetworkAccess: Swift.Bool
  @objc public var visitorIdentifier: Foundation.NSNumber? {
    @objc get
  }
  @objc public var visitorIdentifierString: Swift.String? {
    @objc get
  }
  @objc deinit
}
extension UserLeapKit.UserLeap : UserLeapKit.SprigAPI {
  @objc dynamic public func configure(withEnvironment environment: Swift.String)
  @objc dynamic public func configure(withEnvironment environment: Swift.String, configuration: [Swift.String : Any]? = nil)
  @objc dynamic public func setLocale(_ locale: Swift.String)
  @available(*, deprecated, message: "Use track with EventPayload instead")
  @objc dynamic public func track(eventName: Swift.String, handler: ((UserLeapKit.SurveyState) -> Swift.Void)? = nil)
  @available(*, deprecated, message: "Use track with EventPayload instead")
  @objc dynamic public func track(eventName: Swift.String, userId: Swift.String? = nil, partnerAnonymousId: Swift.String? = nil, handler: ((UserLeapKit.SurveyState) -> Swift.Void)?)
  @available(*, deprecated, message: "Use track with EventPayload instead")
  @objc dynamic public func track(eventName: Swift.String, properties: [Swift.String : Any], handler: ((UserLeapKit.SurveyState) -> Swift.Void)? = nil)
  @available(*, deprecated, message: "Use track with EventPayload instead")
  @objc dynamic public func track(eventName: Swift.String, userId: Swift.String? = nil, partnerAnonymousId: Swift.String? = nil, properties: [Swift.String : Any]?, handler: ((UserLeapKit.SurveyState) -> Swift.Void)?)
  @objc dynamic public func track(payload: UserLeapKit.EventPayload)
  @objc dynamic public func setEmailAddress(_ emailAddress: Swift.String)
  @objc dynamic public func setVisitorAttribute(key: Swift.String, value: Swift.String)
  @objc dynamic public func setVisitorAttribute(key: Swift.String, intValue: Swift.Int)
  @objc dynamic public func setVisitorAttribute(key: Swift.String, doubleValue: Swift.Double)
  @objc dynamic public func setVisitorAttribute(key: Swift.String, boolValue: Swift.Bool)
  @objc dynamic public func setVisitorAttributes(_ attributes: [Swift.String : Any])
  @objc dynamic public func setVisitorAttributes(_ attributes: [Swift.String : Swift.String], userId: Swift.String?, partnerAnonymousId: Swift.String?)
  @objc dynamic public func removeVisitorAttributes(_ attributes: [Swift.String])
  @objc dynamic public func setUserIdentifier(_ identifier: Swift.String)
  @objc dynamic public func setPartnerAnonymousId(_ identifier: Swift.String)
  @objc dynamic public func logout()
}
extension UserLeapKit.UserLeap : UserLeapKit.SprigPresentationAPI {
  @available(*, deprecated, message: "Use trackAndPresent with EventPayload instead")
  @objc dynamic public func trackAndPresent(eventName: Swift.String, from viewController: UIKit.UIViewController)
  @available(*, deprecated, message: "Use trackAndPresent with EventPayload instead")
  @objc dynamic public func trackAndPresent(eventName: Swift.String, userId: Swift.String?, partnerAnonymousId: Swift.String?, from viewController: UIKit.UIViewController)
  @objc dynamic public func trackAndPresent(payload: UserLeapKit.EventPayload, from viewController: UIKit.UIViewController)
  @objc dynamic public func presentSurvey(from viewController: UIKit.UIViewController)
  @objc dynamic public func presentSurvey(withId surveyId: Swift.Int, from viewController: UIKit.UIViewController, fetchCompletion: (() -> Swift.Void)? = nil)
  @objc dynamic public func presentDebugSurvey(from viewController: UIKit.UIViewController)
}
extension UserLeapKit.SurveyState : Swift.Equatable {}
extension UserLeapKit.SurveyState : Swift.Hashable {}
extension UserLeapKit.SurveyState : Swift.RawRepresentable {}
